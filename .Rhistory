lapply(pgks[!pgks %in% installed.packages()[,'Package']],install.packages)
lapply(pgks,require,character.only = TRUE)
sheet_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTg6ChPQBBftPdUB-IFq4OQGFyDruWwBBDyJpPmcPSiSOV1Y_bEx2XeF_wR6vkq-rY4TW2-ZAMP4alN/pub?gid=456743467&single=true&output=csv"
df = fread(sheet_url)
df2 = df
df <- df[!is.na(df$`Record ID`),]
setnames(df,c('Role',"R02 ASW","Record ID"),c('Level','Network',"ID"))
df <- df[df$Network>0&df$Network<15,]
df <- df[,!names(df) %in% c('R25 1 ASOW','R25 2 ASOW','R27 1 ASOW','R27 2 ASOW'),with = F]
df <- df[df$ID %in% df$ID[!sapply(df$ID,function(x) all(melt(df[df$ID==x,grepl('R25|R26|R27',names(df)),with = F])$value %in% c(-2,-5)))],]
role_vectors <- paste0('R05 AW ',c(1:23,35,36))
nms_role_vectors <- paste0('R05 SO ',c(24:30,32:34))
role_url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vShimT8Fb2xCUXjoOaHBCCOaj3UgtHNK5jufXBeltwqnBpqrGd_5aABGQcRAc-kmXOA14LVnpZi1lba/pub?output=csv'
#roles_url = 'input/Roles_Code_Cleaned.csv'
roles_df <- fread(role_url)
id_roles = melt(df[,c('ID','Network','Level',role_vectors,nms_role_vectors),with = F],id.vars = c('ID','Network','Level'),value.name ='Response',variable.name = 'Role' )
id_roles <- id_roles[!grepl('Other ONMS staff',id_roles$Role),]
id_roles = id_roles[id_roles$Response>0,]
id_roles[,Response:=NULL]
id_roles$Role_ID <- paste(id_roles$ID,id_roles$Role,sep='_')
id_roles$Self_Role_Name <- roles_df$Role_Name[match(id_roles$Role,roles_df$Role)]
#questions about alters
#Q25 - which ONMS staff do you communicate with: R25‐ASOW.1 - R25‐ASOW.15
#Q26 - which gov folks do you communicate with: R26‐ASOW.1 - R26‐ASOW.10
#Q27 - which non-gov folks do you communicate with: R27‐ASOW.1 - R27‐ASOW.16
role_count = id_roles[,.N,by=.(Network,Self_Role_Name)]
setnames(role_count,'N','role_count')
actor_details <- data.table(ID = df$ID,Actor_Type =ifelse(df$`R01 ASW`%in%c(1,2),'Advisory Council',ifelse(df$`R01 ASW`%in%c(5,6),'Staff Member','Working Group')),
Time_Involved = df$`R03 ASOW`,Network = df$Network)
alters_df = Reduce(function(u,v) merge(u,v,all=TRUE),list(gather(df[,c('ID','Network',grep('R25',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R26',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R27',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network)))
alters_df  = data.table(alters_df )
alters_df$Response[alters_df$Response==-1] <- 0
did_not_complete = alters_df[,all(Response<0),by=.(ID)][V1==TRUE,]$ID
df = df[!df$ID %in% did_not_complete,]
id_roles = id_roles[!id_roles$ID %in% did_not_complete,]
dyad_df <- merge(actor_details,alters_df)
dyad_df$Alter_Role_Name <- as.factor(roles_df$Role_Name[match(dyad_df$Alter_Role,roles_df$Role)])
#dyad_df$ID = as.factor(dyad_df$ID)
dyad_df = dyad_df[dyad_df$Network<=14,]
dyad_df$Network = as.factor(dyad_df$Network)
dyad_df = dyad_df[dyad_df$Response %in% c(1:3),]
id_roles$Network = as.factor(id_roles$Network)
id_roles[ID=='A372']
id_roles[,.N,by=.(ID)][order(N)]
id_roles[ID=='A047']
dyad_df[ID=='A020',]
id_roles[ID=='A020']
id_roles[duplicated(ID),]
df2[df2$`Record ID`=='A047',][,grepl('R05',names(df2)),with = F]
?merge
dyad_expansion_df = merge(dyad_df,id_roles,all = T,allow.cartesian = T)
dyad_expansion_df$Self_Role_Name = as.factor(dyad_expansion_df$Self_Role_Name)
dyad_expansion_df$Self_Role_Name = fct_expand(dyad_expansion_df$Self_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
dyad_expansion_df$Alter_Role_Name = fct_expand(dyad_expansion_df$Alter_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
tdf = dyad_expansion_df
tdf = tdf[tdf$Self_Role_Name!='NGO',]
tdf = tdf[!is.na(tdf$ID),]
tdf$Self_Role_Name = as.character(tdf$Self_Role_Name)
tdf$Level[is.na(tdf$Level)&tdf$Actor_Type=='Advisory Council'] <- 'A'
tdf[ID=='A047']
set = 1:14
cores = 2
seed = 24
n_sims = 1000
cd_max = 100
mc_max = 40
burn = 5000
interval = 1000
samplesize = 5000
#library(devtools)
#install_github('statnet/ergm')
run_collab = TRUE
run_tech = TRUE
run_both = TRUE
sim_collab = FALSE
sim_tech = FALSE
results = FALSE
#nms_url = 'input/National Marine Sanctuaries Data.csv'
#Q5 - who are you
#R05 AW1-13, AW35-36
#R05 SO24-34 are nms staff
#ASOWs are drops
df = fread(sheet_url)
df2 = df
df <- df[!is.na(df$`Record ID`),]
df$ID = df$`Record ID`
df$Network <- df$`R02 ASW`
df <- df[df$Network>0&df$Network<15,]
df <- df[,!names(df) %in% c('R25 1 ASOW','R25 2 ASOW','R27 1 ASOW','R27 2 ASOW')]
df <- df[df$ID %in% df$ID[!sapply(df$ID,function(x) all((gather(df[df$ID==x,grepl('25|26|27',names(df))]))$value %in% c(-2,-5)))],]
df = df %>% rename(Level = Role)
role_vectors <- paste0('R05 AW ',c(1:23,35,36))
nms_role_vectors <- paste0('R05 SO ',c(24:30,32:34))
role_url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vShimT8Fb2xCUXjoOaHBCCOaj3UgtHNK5jufXBeltwqnBpqrGd_5aABGQcRAc-kmXOA14LVnpZi1lba/pub?output=csv'
#roles_url = 'input/Roles_Code_Cleaned.csv'
roles_df <- read_csv(role_url)
id_roles = gather(df[,c('ID','Network','Level',role_vectors,nms_role_vectors)],Role,Response,-ID,-Network,-Level)
id_roles <- id_roles[!grepl('Other ONMS staff',id_roles$Role),]
id_roles = id_roles[id_roles$Response>0,]
id_roles = id_roles %>% select(-Response)
id_roles$Role_ID <- paste(id_roles$ID,id_roles$Role,sep='_')
id_roles$Self_Role_Name <- roles_df$Role_Name[match(id_roles$Role,roles_df$Role)]
#questions about alters
#Q25 - which ONMS staff do you communicate with: R25‐ASOW.1 - R25‐ASOW.15
#Q26 - which gov folks do you communicate with: R26‐ASOW.1 - R26‐ASOW.10
#Q27 - which non-gov folks do you communicate with: R27‐ASOW.1 - R27‐ASOW.16
role_count = id_roles %>% group_by(Network,Self_Role_Name) %>% summarise(role_count = n())
actor_details <- data.frame(ID = df$ID,Actor_Type =ifelse(df$`R01 ASW`%in%c(1,2),'Advisory Council',ifelse(df$`R01 ASW`%in%c(5,6),'Staff Member','Working Group')),
Time_Involved = df$`R03 ASOW`,Network = df$Network)
alters_df = Reduce(function(u,v) merge(u,v,all=TRUE),list(gather(df[,c('ID','Network',grep('R25',names(df),value=T))],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R26',names(df),value=T))],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R27',names(df),value=T))],Alter_Role,Response,-ID,-Network)))
alters_df$Response[alters_df$Response==-1] <- 0
did_not_complete = alters_df %>% group_by(ID) %>% summarise(no_see = all(Response<0)) %>% filter(no_see) %>% .$ID
df = df[!df$ID %in% did_not_complete,]
id_roles = id_roles[!id_roles$ID %in% did_not_complete,]
dyad_df <- full_join(actor_details,alters_df)
dyad_df$Alter_Role_Name <- as.factor(roles_df$Role_Name[match(dyad_df$Alter_Role,roles_df$Role)])
#dyad_df$ID = as.factor(dyad_df$ID)
dyad_df = dyad_df[dyad_df$Network<=14,]
dyad_df$Network = as.factor(dyad_df$Network)
dyad_df = dyad_df[dyad_df$Response %in% c(1:3),]
id_roles$Network = as.factor(id_roles$Network)
dyad_expansion_df = full_join(dyad_df,id_roles)
dyad_expansion_df$Self_Role_Name = as.factor(dyad_expansion_df$Self_Role_Name)
dyad_expansion_df$Self_Role_Name = fct_expand(dyad_expansion_df$Self_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
dyad_expansion_df$Alter_Role_Name = fct_expand(dyad_expansion_df$Alter_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
tdf = dyad_expansion_df
tdf = tdf[tdf$Self_Role_Name!='NGO',]
tdf = tdf[!is.na(tdf$ID),]
tdf$Self_Role_Name = as.character(tdf$Self_Role_Name)
tdf$Level[is.na(tdf$Level)&tdf$Actor_Type=='Advisory Council'] <- 'A'
#setwd('~/Documents/Github/eel')
#system('ln -s ~/Box/eel/input/ ~/Documents/GitHub/eel')
#system('ln -s ~/Box/eel/output/ ~/Documents/GitHub/eel')
pgks = c('tidyverse','statnet','tidyselect','ggnetwork','ggthemes','fergm','data.table','magrittr')
lapply(pgks[!pgks %in% installed.packages()[,'Package']],install.packages)
lapply(pgks,require,character.only = TRUE)
sheet_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTg6ChPQBBftPdUB-IFq4OQGFyDruWwBBDyJpPmcPSiSOV1Y_bEx2XeF_wR6vkq-rY4TW2-ZAMP4alN/pub?gid=456743467&single=true&output=csv"
df = fread(sheet_url)
df2 = df
df <- df[!is.na(df$`Record ID`),]
setnames(df,c('Role',"R02 ASW","Record ID"),c('Level','Network',"ID"))
df <- df[df$Network>0&df$Network<15,]
df <- df[,!names(df) %in% c('R25 1 ASOW','R25 2 ASOW','R27 1 ASOW','R27 2 ASOW'),with = F]
df <- df[df$ID %in% df$ID[!sapply(df$ID,function(x) all(melt(df[df$ID==x,grepl('R25|R26|R27',names(df)),with = F])$value %in% c(-2,-5)))],]
role_vectors <- paste0('R05 AW ',c(1:23,35,36))
nms_role_vectors <- paste0('R05 SO ',c(24:30,32:34))
role_url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vShimT8Fb2xCUXjoOaHBCCOaj3UgtHNK5jufXBeltwqnBpqrGd_5aABGQcRAc-kmXOA14LVnpZi1lba/pub?output=csv'
#roles_url = 'input/Roles_Code_Cleaned.csv'
roles_df <- fread(role_url)
id_roles = melt(df[,c('ID','Network','Level',role_vectors,nms_role_vectors),with = F],id.vars = c('ID','Network','Level'),value.name ='Response',variable.name = 'Role' )
id_roles <- id_roles[!grepl('Other ONMS staff',id_roles$Role),]
id_roles = id_roles[id_roles$Response>0,]
id_roles[,Response:=NULL]
id_roles$Role_ID <- paste(id_roles$ID,id_roles$Role,sep='_')
id_roles$Self_Role_Name <- roles_df$Role_Name[match(id_roles$Role,roles_df$Role)]
#questions about alters
#Q25 - which ONMS staff do you communicate with: R25‐ASOW.1 - R25‐ASOW.15
#Q26 - which gov folks do you communicate with: R26‐ASOW.1 - R26‐ASOW.10
#Q27 - which non-gov folks do you communicate with: R27‐ASOW.1 - R27‐ASOW.16
role_count = id_roles[,.N,by=.(Network,Self_Role_Name)]
setnames(role_count,'N','role_count')
actor_details <- data.table(ID = df$ID,Actor_Type =ifelse(df$`R01 ASW`%in%c(1,2),'Advisory Council',ifelse(df$`R01 ASW`%in%c(5,6),'Staff Member','Working Group')),
Time_Involved = df$`R03 ASOW`,Network = df$Network)
alters_df = Reduce(function(u,v) merge(u,v,all=TRUE),list(gather(df[,c('ID','Network',grep('R25',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R26',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R27',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network)))
alters_df  = data.table(alters_df )
alters_df$Response[alters_df$Response==-1] <- 0
did_not_complete = alters_df[,all(Response<0),by=.(ID)][V1==TRUE,]$ID
df = df[!df$ID %in% did_not_complete,]
id_roles = id_roles[!id_roles$ID %in% did_not_complete,]
dyad_df <- merge(actor_details,alters_df)
dyad_df$Alter_Role_Name <- as.factor(roles_df$Role_Name[match(dyad_df$Alter_Role,roles_df$Role)])
#dyad_df$ID = as.factor(dyad_df$ID)
dyad_df = dyad_df[dyad_df$Network<=14,]
dyad_df$Network = as.factor(dyad_df$Network)
dyad_df = dyad_df[dyad_df$Response %in% c(1:3),]
id_roles$Network = as.factor(id_roles$Network)
dyad_expansion_df = merge(dyad_df,id_roles,all = T,allow.cartesian = T)
dyad_expansion_df$Self_Role_Name = as.factor(dyad_expansion_df$Self_Role_Name)
dyad_expansion_df$Self_Role_Name = fct_expand(dyad_expansion_df$Self_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
dyad_expansion_df$Alter_Role_Name = fct_expand(dyad_expansion_df$Alter_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
tdf = dyad_expansion_df
tdf = tdf[tdf$Self_Role_Name!='NGO',]
tdf = tdf[!is.na(tdf$ID),]
tdf$Self_Role_Name = as.character(tdf$Self_Role_Name)
tdf$Level[is.na(tdf$Level)&tdf$Actor_Type=='Advisory Council'] <- 'A'
tdf[ID=='A047']
testn = lapply(1:14,function(n) {
print(n)
temp_df = tdf %>% filter(Network==n)
temp_df$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_df$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
#temp_df = temp_df[!is.na(temp_df$Alter_ID),]
mnet = multinet::ml.empty()
add.layers.ml(mnet,as.character(unique(temp_df$Level)),directed = rep(TRUE,length(unique(temp_df$Level))))
add.actors.ml(mnet,as.character(unique(temp_df$ID)))
add.actors.ml(mnet,as.character(unique(temp_df$Alter_ID)))
n1 = data.frame(grep('^W',temp_df$ID,value=T),rep('W',sum(grepl('^W',temp_df$ID))),stringsAsFactors = F);n1 = n1[!duplicated(n1),]
if(nrow(n1)>0){add.vertices.ml(mnet,n1)}
n2 = data.frame(grep('^A',temp_df$ID,value=T),rep('A',sum(grepl('^A',temp_df$ID))),stringsAsFactors = F);n2 = n2[!duplicated(n2),]
if(nrow(n2)>0){add.vertices.ml(mnet,n2)}
n3 = data.frame(grep('^S',temp_df$ID,value=T),rep('S',sum(grepl('^S',temp_df$ID))),stringsAsFactors = F);n3 = n3[!duplicated(n3),]
if(nrow(n3)>0){add.vertices.ml(mnet,n3)}
edges = data.frame(ID = temp_df$ID,Level = temp_df$Level,Alter_ID = temp_df$Alter_ID,Alter_Level = str_extract(temp_df$Alter_ID,'^[A-Z]{1}'),stringsAsFactors = F)
isols = edges[is.na(edges$Alter_Level),]
edges = edges[!is.na(edges$Alter_Level),]
print(nrow(isols)/(nrow(edges)+nrow(isols)))
#isols <- isols[!isols$temp_df.ID %in% edges$temp_df.ID,]
add.edges.ml(mnet,edges)
mnet})
#setwd('~/Documents/Github/eel')
#system('ln -s ~/Box/eel/input/ ~/Documents/GitHub/eel')
#system('ln -s ~/Box/eel/output/ ~/Documents/GitHub/eel')
pgks = c('tidyverse','statnet','tidyselect','ggnetwork','ggthemes','fergm','data.table','magrittr')
lapply(pgks[!pgks %in% installed.packages()[,'Package']],install.packages)
lapply(pgks,require,character.only = TRUE)
sheet_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTg6ChPQBBftPdUB-IFq4OQGFyDruWwBBDyJpPmcPSiSOV1Y_bEx2XeF_wR6vkq-rY4TW2-ZAMP4alN/pub?gid=456743467&single=true&output=csv"
df = fread(sheet_url)
df2 = df
df <- df[!is.na(df$`Record ID`),]
setnames(df,c('Role',"R02 ASW","Record ID"),c('Level','Network',"ID"))
df <- df[df$Network>0&df$Network<15,]
df <- df[,!names(df) %in% c('R25 1 ASOW','R25 2 ASOW','R27 1 ASOW','R27 2 ASOW'),with = F]
df <- df[df$ID %in% df$ID[!sapply(df$ID,function(x) all(melt(df[df$ID==x,grepl('R25|R26|R27',names(df)),with = F])$value %in% c(-2,-5)))],]
role_vectors <- paste0('R05 AW ',c(1:23,35,36))
nms_role_vectors <- paste0('R05 SO ',c(24:30,32:34))
role_url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vShimT8Fb2xCUXjoOaHBCCOaj3UgtHNK5jufXBeltwqnBpqrGd_5aABGQcRAc-kmXOA14LVnpZi1lba/pub?output=csv'
#roles_url = 'input/Roles_Code_Cleaned.csv'
roles_df <- fread(role_url)
id_roles = melt(df[,c('ID','Network','Level',role_vectors,nms_role_vectors),with = F],id.vars = c('ID','Network','Level'),value.name ='Response',variable.name = 'Role' )
id_roles <- id_roles[!grepl('Other ONMS staff',id_roles$Role),]
id_roles = id_roles[id_roles$Response>0,]
id_roles[,Response:=NULL]
id_roles$Role_ID <- paste(id_roles$ID,id_roles$Role,sep='_')
id_roles$Self_Role_Name <- roles_df$Role_Name[match(id_roles$Role,roles_df$Role)]
#questions about alters
#Q25 - which ONMS staff do you communicate with: R25‐ASOW.1 - R25‐ASOW.15
#Q26 - which gov folks do you communicate with: R26‐ASOW.1 - R26‐ASOW.10
#Q27 - which non-gov folks do you communicate with: R27‐ASOW.1 - R27‐ASOW.16
role_count = id_roles[,.N,by=.(Network,Self_Role_Name)]
setnames(role_count,'N','role_count')
actor_details <- data.table(ID = df$ID,Actor_Type =ifelse(df$`R01 ASW`%in%c(1,2),'Advisory Council',ifelse(df$`R01 ASW`%in%c(5,6),'Staff Member','Working Group')),
Time_Involved = df$`R03 ASOW`,Network = df$Network)
alters_df = Reduce(function(u,v) merge(u,v,all=TRUE),list(gather(df[,c('ID','Network',grep('R25',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R26',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R27',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network)))
alters_df  = data.table(alters_df )
alters_df$Response[alters_df$Response==-1] <- 0
did_not_complete = alters_df[,all(Response<0),by=.(ID)][V1==TRUE,]$ID
df = df[!df$ID %in% did_not_complete,]
id_roles = id_roles[!id_roles$ID %in% did_not_complete,]
dyad_df <- merge(actor_details,alters_df)
dyad_df$Alter_Role_Name <- as.factor(roles_df$Role_Name[match(dyad_df$Alter_Role,roles_df$Role)])
#dyad_df$ID = as.factor(dyad_df$ID)
dyad_df = dyad_df[dyad_df$Network<=14,]
dyad_df$Network = as.factor(dyad_df$Network)
dyad_df = dyad_df[dyad_df$Response %in% c(1:3),]
id_roles$Network = as.factor(id_roles$Network)
dyad_expansion_df = merge(dyad_df,id_roles,all = T,allow.cartesian = T,by = c('ID','Network'))
dyad_expansion_df$Self_Role_Name = as.factor(dyad_expansion_df$Self_Role_Name)
dyad_expansion_df$Self_Role_Name = fct_expand(dyad_expansion_df$Self_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
dyad_expansion_df$Alter_Role_Name = fct_expand(dyad_expansion_df$Alter_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
tdf = dyad_expansion_df
tdf = tdf[tdf$Self_Role_Name!='NGO',]
tdf = tdf[!is.na(tdf$ID),]
tdf$Self_Role_Name = as.character(tdf$Self_Role_Name)
tdf$Level[is.na(tdf$Level)&tdf$Actor_Type=='Advisory Council'] <- 'A'
set = 1:14
testn = lapply(1:14,function(n) {
print(n)
temp_df = tdf %>% filter(Network==n)
temp_df$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_df$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
#temp_df = temp_df[!is.na(temp_df$Alter_ID),]
mnet = multinet::ml.empty()
add.layers.ml(mnet,as.character(unique(temp_df$Level)),directed = rep(TRUE,length(unique(temp_df$Level))))
add.actors.ml(mnet,as.character(unique(temp_df$ID)))
add.actors.ml(mnet,as.character(unique(temp_df$Alter_ID)))
n1 = data.frame(grep('^W',temp_df$ID,value=T),rep('W',sum(grepl('^W',temp_df$ID))),stringsAsFactors = F);n1 = n1[!duplicated(n1),]
if(nrow(n1)>0){add.vertices.ml(mnet,n1)}
n2 = data.frame(grep('^A',temp_df$ID,value=T),rep('A',sum(grepl('^A',temp_df$ID))),stringsAsFactors = F);n2 = n2[!duplicated(n2),]
if(nrow(n2)>0){add.vertices.ml(mnet,n2)}
n3 = data.frame(grep('^S',temp_df$ID,value=T),rep('S',sum(grepl('^S',temp_df$ID))),stringsAsFactors = F);n3 = n3[!duplicated(n3),]
if(nrow(n3)>0){add.vertices.ml(mnet,n3)}
edges = data.frame(ID = temp_df$ID,Level = temp_df$Level,Alter_ID = temp_df$Alter_ID,Alter_Level = str_extract(temp_df$Alter_ID,'^[A-Z]{1}'),stringsAsFactors = F)
isols = edges[is.na(edges$Alter_Level),]
edges = edges[!is.na(edges$Alter_Level),]
print(nrow(isols)/(nrow(edges)+nrow(isols)))
#isols <- isols[!isols$temp_df.ID %in% edges$temp_df.ID,]
add.edges.ml(mnet,edges)
mnet})
testn[[1]]
plot(testn[[1]])
warnings()
tdf[Network==2]
temp_net = tdf[Network==2]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
n = 2
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
temp_net
temp_net[is.na(Alter_ID)]
unique(temp_net$ID)
df2[df2$`R02 1 ASOW`]
df2[df2$`R02 1 ASOW`==2,]
dim(df2[df2$`R02 1 ASOW`==2,] )
df2$
df2[`R02 1 ASOW`==2,]
df2$
df2[Network==2,]
class(df2)
df2[Network==2,]
df2[`R02 1 ASOW`==2,]
df2[`R02 1 ASOW`==2,][!duplicated(`Record ID`)]
df2[`R02 1 ASOW`==2,][!duplicated(`Record ID`),]
test = df2[`R02 1 ASOW`==2,][!duplicated(`Record ID`),]
dim(test)
df2[`R02 2 ASOW 2`==1,]
test = df2[`R02 2 ASOW 2`==1,][!duplicated(`Record ID`),]
dim(test)
unique(temp_net$ID)
length(unique(temp_net$ID))
test$`Record ID`
n = ``
n = 1
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
length(unique(temp_net$ID))
test = df2[`R02 2 ASOW 2`==1,][!duplicated(`Record ID`),]
test$`Record ID`
unique(temp_net$ID)
n = 2
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
length(unique(temp_net$ID))
test = df2[`R02 2 ASOW 2`==1,][!duplicated(`Record ID`),]
test$`Record ID`
unique(temp_net$ID)
test = df2[`R02 2 ASOW 2`==1,]
test[`Record ID`=='A112',grepl('R2[5-7]',colnames(test)), with = F]
unique(test$`Record ID`)
intersect(length(unique(temp_net$ID)),unique(test$`Record ID`))
tdf
n = 4
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
length(unique(temp_net$ID))
test = df2[`R02 2 ASOW 4`==1,]
intersect(length(unique(temp_net$ID)),unique(test$`Record ID`))
test = df2[`R02 2 ASOW 4`==2,]
intersect(length(unique(temp_net$ID)),unique(test$`Record ID`))
n = 1
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
length(unique(temp_net$ID))
temp_net$ID
test = df2[df2$`Record ID`=="W117",grepl('^R02',names(df2)),with = F]
test
df2$`R02 1 ASOW`
df2$`R02 2 ASOW 1`
length(unique(temp_net$ID))
table(df2$`R02 2 ASOW 1`)
df2$`Record ID`[df2$`R02 2 ASOW 1`]
df2$`Record ID`[df2$`R02 2 ASOW 1`==1]
unique(temp_net$ID)
n = 2
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
length(unique(temp_net$ID))
temp_net$ID
tdf$Network
tdf$ID[tdf$Network==1]
unique(tdf$ID[tdf$Network==1])
test = df2[df2$`Record ID`=="A035",grepl('^R02',names(df2)),with = F]
test
names(df2)
df2$`R02 ASW`
n = 1
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
temp_net
temp_net[!duplicated(ID)]
table(df2$`R02 ASW`)
temp_net[!duplicated(ID)]
network(length(unique(temp_net$ID)))
network::network.initialize(length(unique(temp_net$ID)),directed = T,bipartite = F)
net = network::network.initialize(length(unique(temp_net$ID)),directed = T,bipartite = F)
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = T,bipartite = F)
net %v% 'vertext.names'
net %v% 'vertext.names' <- sort(unique(temp_net$ID))
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
net
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = T,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
net
add.edges.network(net,tail = temp_net$ID,head = temp_net$Alter_ID)
add.edges.network(net,tail = temp_net$ID[!is.na(temp_net$Alter_ID)],head = temp_net$Alter_ID[!is.na(temp_net$Alter_ID)])
?add.edges.network
add.edge.network(net,tail = temp_net$ID[!is.na(temp_net$Alter_ID)],head = temp_net$Alter_ID[!is.na(temp_net$Alter_ID)])
warnings()
temp_net[is.na(Alter_ID),]
temp_net[!is.na(Alter_ID),]
temp_net[,.N,by=.(ID)]
devtools::install_github("tedhchen/multilayer.ergm",
build_opts = c("--no-resave-data", "--no-manual"))
install.packages('devtools')
devtools::install_github("tedhchen/multilayer.ergm",
build_opts = c("--no-resave-data", "--no-manual"))
devtools::install_github("tedhchen/multilayer.ergm",
build_opts = c("--no-resave-data", "--no-manual"))
devtools::install_github("tedhchen/multilayer.ergm")
library(multilayer.ergm)
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = T,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
cnet = net
inet = net
temp_net]
temp_net
temp_net[Response==1,]
add.edges.network(x = cnet,tail ='A035',head = 'S039')
network.vertex.names(net)
add.edge(x = cnet,tail ='A035',head = 'S039')
add.edge(x = cnet,tail =match('A035',network.vertex.names(net)),head = match('S039',network.vertex.names(net)))
setwd('Documents/GitHub/coastal_flooding/')
require(data.table)
fls = list.files('../../../Box/coastal_flooding/output/coastal_city_by_day/',recursive = T,full.names = T)
require(stringr)
require(doParallel)
require(parallel)
require(lubridate)
#cl = makeCluster(4)
#registerDoParallel(cl)
#parallel::clusterEvalQ(cl,require(data.table))
files_by_year = split(fls,str_extract(basename(fls),'^[0-9]{4}'))
files = paste0('../../../Box/coastal_flooding/output/flood_tweets_by_city_hour/flood_tweets_by_city_hour_',names(files_by_year),'.csv')
#files = files[!file.exists(files)]
#files_by_year = files_by_year[str_extract(basename(files),'[0-9]{4}')]
for(f in seq_along(files)){
file = files[f]
fls_temp = files_by_year[[f]]
if(file.exists(file)){
have = fread(file)
have[,ymd:= paste(year,formatC(month,width = 2,flag = '0'),day,sep = '-')]
fls_temp = fls_temp[!ymd(str_remove(basename(fls_temp),'\\.csv')) %in% ymd(have$ymd)]
}
for(i in seq_along(fls_temp)){
Sys.sleep(0.5)
print(i)
if(i==1){temp_combo = data.table()}
temp = NULL
while(is.null(temp)){
temp = tryCatch({fread(fls_temp[i])},error = function(e) NULL)
}
temp = temp[Probability_Flooding_V2>0.5,]
temp = temp[,list(sum(Probability_Flooding_V2>0.5),sum(Probability_Flooding_V2>0.75),sum(Probability_Flooding_V2>0.90)),by=.(GEOID,place.name,year,month,day,hour)]
setnames(temp,c('V1','V2','V3'),c('p0.5','p0.75','p0.90'))
#temp = temp[,list(.N),by=.(GEOID,place.name,year,month,day,hour)]
#setnames(temp,c('N'),c('Flooding_Tweets_p.5'))
temp_combo = rbind(temp_combo,temp,use.names = T)
if(i %in% seq(1,length(fls),25)|i == length(fls)){
if(!file.exists(file)){fwrite(temp_combo,file);temp_combo=data.table()}
else{fwrite(temp_combo,file,append = T);temp_combo=data.table()}}
}
}
warnings()
require(data.table)
fls = list.files('../../../Box/coastal_flooding/output/coastal_city_by_day/',recursive = T,full.names = T)
require(stringr)
require(doParallel)
require(parallel)
require(lubridate)
#cl = makeCluster(4)
#registerDoParallel(cl)
#parallel::clusterEvalQ(cl,require(data.table))
files_by_year = split(fls,str_extract(basename(fls),'^[0-9]{4}'))
files = paste0('../../../Box/coastal_flooding/output/flood_tweets_by_city_hour/flood_tweets_by_city_hour_',names(files_by_year),'.csv')
#files = files[!file.exists(files)]
#files_by_year = files_by_year[str_extract(basename(files),'[0-9]{4}')]
for(f in seq_along(files)){
file = files[f]
fls_temp = files_by_year[[f]]
if(file.exists(file)){
have = fread(file)
have[,ymd:= paste(year,formatC(month,width = 2,flag = '0'),day,sep = '-')]
fls_temp = fls_temp[!ymd(str_remove(basename(fls_temp),'\\.csv')) %in% ymd(have$ymd)]
}
for(i in seq_along(fls_temp)){
Sys.sleep(0.5)
print(i)
if(i==1){temp_combo = data.table()}
temp = NULL
while(is.null(temp)){
temp = tryCatch({fread(fls_temp[i])},error = function(e) NULL)
}
temp = temp[Probability_Flooding_V2>0.5,]
temp = temp[,list(sum(Probability_Flooding_V2>0.5),sum(Probability_Flooding_V2>0.75),sum(Probability_Flooding_V2>0.90)),by=.(GEOID,place.name,year,month,day,hour)]
setnames(temp,c('V1','V2','V3'),c('p0.5','p0.75','p0.90'))
#temp = temp[,list(.N),by=.(GEOID,place.name,year,month,day,hour)]
#setnames(temp,c('N'),c('Flooding_Tweets_p.5'))
temp_combo = rbind(temp_combo,temp,use.names = T)
if(i %in% seq(1,length(fls),25)|i == length(fls)){
if(!file.exists(file)){fwrite(temp_combo,file);temp_combo=data.table()}
else{fwrite(temp_combo,file,append = T);temp_combo=data.table()}}
}
}
test = fread('output/flood_tweets_by_city_hour/flood_tweets_by_city_hour_2019.csv')
test
summary(test$p0.90)
test[order(-p0.90),]
