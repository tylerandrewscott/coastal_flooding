empty_list = list()
empty_list = list()
for(i in seq_along(place_split_list)){
print(i)
temp_codes = tryCatch({geocode_OSM(place_split_list[[1]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
if(is.null(temp_codes)){
empty_list[[i]]<- geocode_OSM(place_split_list[[1]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')}
rm(temp_codes)
}
empty_list = list()
for(i in seq_along(place_split_list)){
print(i)
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
if(is.null(temp_codes)){
empty_list[[i]]<- geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')}
rm(temp_codes)
}
empty_list[[1]]
str(empty_list)
for(i in seq_along(place_split_list)[1:4]){
print(i)
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
if(is.null(temp_codes)){
empty_list[[i]]<- geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')}
rm(temp_codes)
}
empty_list = list()
for(i in seq_along(place_split_list)[1:4]){
print(i)
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
if(is.null(temp_codes)){
empty_list[[i]]<- geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')}
rm(temp_codes)
}
i = 1
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
temp_codes
place_split_list[[i]]
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]][1:4],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
temp_codes
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
temp_codes
test = sapply(place_split_list[[i]],function(x) geocode_OSM(x,keep.unfound = T,as.sf = T,details = F,geometry = 'point'))
test = sapply(seq_along(place_split_list[[i]]),function(x) {print(x);geocode_OSM(place_split_list[[i]][x],
keep.unfound = T,as.sf = T,details = F,geometry = 'point')})
geocode_OSM(place_split_list[[i]][7],
keep.unfound = T,as.sf = T,details = F,geometry = 'point')
place_split_list[[i]][7]
geocode_OSM(place_split_list[[i]][7])
geocode_OSM(q = place_split_list[[i]][7],return.first.only = T)
geocode_OSM(q = place_split_list[[i]][7],return.first.only = T,as.data.frame = T)
install.packages('tidygeocoder')
tidygeocoder::geo_osm('Stanford, CA')
tidygeocoder::geo(city = 'Stanford, CA')
tidygeocoder::geo(city = 'Stanford, California')
geocode_OSM('Stanford, California')
geocode_OSM('Auburn, WA')
geocode_OSM('Auburn, WA',as.sf = T)
geocode_OSM('Auburn, WA',as.sf = T,geometry = 'point')
geocode_OSM('Auburn, WA',as.sf = T,geometry = 'point',return.first.only = T,details = F)
geocode_OSM('Auburn, WA',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
geocode_OSM('Stanford, California',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
geocode_OSM('Stanford, CDP')
install.packages('tigris')
ca_cdp = tigris::places('CA')
ca_cpd
ca_cdp = tigris::places('CA',class = 'sf')
ca_cdp
ca_cdp[ca_cdp$NAME=='Stanford']
ca_cdp[ca_cdp$NAME=='Stanford',]
places
str_extract(places,'[A-Z]{2}$')
require(stringr)
str_extract(places,'[A-Z]{2}$')
places[757]
tdf[place.name=='Newport']
msa = tigris::combined_statistical_areas(class = 'sf')
msa[msa$GEOID=='39300']
msa[msa$GEOID=='39300',]
msa
msa[grepl('Newport',msa$NAME),]
tdf[place.name=='Newport']
msa[msa$GEOID=='300',]
msa[grepl('Providence',msa$NAME),]
cbsa_site = 'https://www.uspto.gov/web/offices/ac/ido/oeip/taf/cls_cbsa/cbsa_countyassoc.htm'
require(rvest)
cbsa_site %>% read_html() %>% html_nodes('table') %>% html_table(trim = T)
cbsa =  tigris::core_based_statistical_areas(class = 'sf')
cbsa$GEOID
cbsa[cbsa$GEOID=='39300',]
str_extract_all(cbsa$NAME,'[A-Z]{2}')
unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}'))
state.abb
table(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) %in% state.abb)
test= unique(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) )
test[!test %in% state.abb]
install.packages('maps')
tigris::list_states()
states = tigris::states(class = 'sf')
table(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) %in% states$STUSPS)
qpd = data.table(places = places)
qpd$STUPS <- str_extract(places,'[A-Z]{2}$')
qpd
qpd$pname <- str_extract(places,'.*\\,')
qpd = data.table(places = tdf$place.name,GEOID = tdf$GEOID)
qpd = data.table(places = tdf$place.name,GEOID = tdf$GEOID)
qpd$STUPS <- str_extract(qpd$places,'[A-Z]{2}$')
qpd$pname <- str_extract(qpd$places,'.*\\,')
qpd
qpd$pname <- str_extract(qpd$places,'^[^\\,]+')
qpd[order(places,GEOID),]
qpd[order(-places,GEOID),]
qpd
qpd[order(-places,GEOID),]
qpd = data.table(places = tdf$place.name,GEOID = tdf$GEOID)
qpd$places <- gsub('"','',qpd$places)
qpd$STUPS <- str_extract(qpd$places,'[A-Z]{2}$')
qpd$pname <- str_extract(qpd$places,'^[^\\,]+')
qpd
qpd[order(-places,GEOID),]
str_extract_all(cbsa$NAME,'[A-Z]{2}')[match(qpd$GEOID,cbsa$GEOID)]
replace_states = str_extract_all(cbsa$NAME,'[A-Z]{2}')[match(qpd$GEOID,cbsa$GEOID)]
qpd$STUPS[is.na(qpd$STUPS)]<-replace_states[is.na(qpd$STUPS)]
qpd
qpd = qpd[order(places,GEOID),]
qpd
uq = which(!duplicated(qpd))
uq = which(!duplicated(paste(qpd$places,qpd$GEOID))
table(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) %in% states$STUSPS)
qpd[order(-places,GEOID),]
qpd
placesstr_extract(places,'[A-Z]{2}$')
tdf[place.name=='Newport']
split_places = dplyr::ntile(x = seq_along(places),n = 1000)
place_split_list = split(places,split_places)
empty_list = list()
for(i in seq_along(place_split_list)[1:4]){
print(i)
i = 1
test = sapply(seq_along(place_split_list[[i]]),function(x) {print(x);geocode_OSM(place_split_list[[i]][x],
keep.unfound = T,as.sf = T,details = F,geometry = 'point')})
geocode_OSM('Stanford, CDP')
geocode_OSM('Auburn, WA',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
geocode_OSM('Stanford, California',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
ca_cdp = tigris::places('CA',class = 'sf')
test= unique(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) )
test[!test %in% state.abb]
cbsa[cbsa$GEOID=='39300',]
msa[msa$GEOID=='300',]
msa[grepl('Providence',msa$NAME),]
require(rvest)
cbsa_site = 'https://www.uspto.gov/web/offices/ac/ido/oeip/taf/cls_cbsa/cbsa_countyassoc.htm'
cbsa_site %>% read_html() %>% html_nodes('table') %>% html_table(trim = T)
ca_cdp[ca_cdp$NAME=='Stanford',]
tidygeocoder::geo(city = 'Stanford, California')
geocode_OSM(q = place_split_list[[i]][7],return.first.only = T,)
keep.unfound = T,as.sf = T,details = F,geometry = 'point')
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
temp_codes
if(is.null(temp_codes)){
empty_list[[i]]<- temp_codes}
rm(temp_codes)
}
uq = which(!duplicated(paste(qpd$places,qpd$GEOID)))
uq
uqpd
qpd
qpd[100,]
qpd[100:102,]
u = 100
u = 101
s = 'MD'
paste(pname,s,sep = ', ')
paste(qpd$pname[uq],s,sep = ', ')
qpd$pname[uq]
paste(qpd$pname[u],s,sep = ', ')
geocode_OSM(paste(qpd$pname[u],s,sep = ', '))
places
qpd
temp_places <- tigris::places('CA',class = 'sf')
temp_places
match(temp_places$STATEFP,states$STATEFP)
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
qpd$places
table(qpd$places %in% temp_places$place_state)
temp_centroids = st_centroid(temp_places)
temp_centroids
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
qpd = data.table(places = tdf$place.name,GEOID = tdf$GEOID)
qpd$places <- gsub('"','',qpd$places)
qpd$STUPS <- str_extract(qpd$places,'[A-Z]{2}$')
qpd$pname <- str_extract(qpd$places,'^[^\\,]+')
cbsa =  tigris::core_based_statistical_areas(class = 'sf')
states = tigris::states(class = 'sf')
replace_states = str_extract_all(cbsa$NAME,'[A-Z]{2}')[match(qpd$GEOID,cbsa$GEOID)]
qpd$STUPS[is.na(qpd$STUPS)]<-replace_states[is.na(qpd$STUPS)]
qpd = qpd[order(places,GEOID),]
uq = which(!duplicated(paste(qpd$places,qpd$GEOID)))
temp_places <- tigris::places('CA',class = 'sf')
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
length(replace)
gc()
length(temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)])
qpd$lat = qpd$lon = NA
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
unique(states$STUSPS)
qpd
!any('WY'== qpd$STUPS)
for(state in unique(states$STUSPS)){
print(state)
if(!any(state== qpd$STUPS)){next}
temp_places <- tigris::places(state,class = 'sf')
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat = qpd$lon = NA
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
}
for(state in unique(states$STUSPS)){
print(state)
if(!any(state== qpd$STUPS)){next}
temp_places <- tigris::places(state,class = 'sf',year = 2016)
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat = qpd$lon = NA
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
}
temp_places <- tigris::places('WV',class = 'sf',year = 2016)
temp_places <- tigris::places('WV',class = 'sf',year = 2018)
temp_places <- tigris::places('WV',class = 'sf',year = 2017)
require(data.table)
flist = list.files('~/Box/coastal_flooding/output/flood_tweets_by_city_hour/',full.name = T)
tablist = lapply(flist,fread)
tdf = rbindlist(tablist)
places = unique(tdf$place.name)
require(maptools)
require(sf)
require(gganimate)
require(osmdata)
require(pbapply)
require(mapsapi)
require(tmaptools)
require(stringr)
qpd = data.table(places = tdf$place.name,GEOID = tdf$GEOID)
qpd$places <- gsub('"','',qpd$places)
qpd$STUPS <- str_extract(qpd$places,'[A-Z]{2}$')
qpd$pname <- str_extract(qpd$places,'^[^\\,]+')
cbsa =  tigris::core_based_statistical_areas(class = 'sf')
states = tigris::states(class = 'sf')
replace_states = str_extract_all(cbsa$NAME,'[A-Z]{2}')[match(qpd$GEOID,cbsa$GEOID)]
qpd$STUPS[is.na(qpd$STUPS)]<-replace_states[is.na(qpd$STUPS)]
qpd = qpd[order(places,GEOID),]
uq = which(!duplicated(paste(qpd$places,qpd$GEOID)))
for(state in unique(states$STUSPS)){
print(state)
if(!any(state== qpd$STUPS)){next}
temp_places <- tigris::places('WV',class = 'sf',year = 2017)
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat = qpd$lon = NA
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
}
for(state in unique(states$STUSPS)){
print(state)
if(!any(state== qpd$STUPS)){next}
temp_places <- tigris::places(state,class = 'sf',year = 2017)
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat = qpd$lon = NA
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
}
state = 'WA'
temp_places <- tigris::places(state,class = 'sf',year = 2017)
temp_places <- tigris::places(state,class = 'sf',year = 2018)
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat = qpd$lon = NA
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
unique(states$STUSPS)
which(unique(states$STUSPS)=='WA')
for(state in unique(states$STUSPS)[21:56]){
print(state)
if(!any(state== qpd$STUPS)){next}
temp_places <- tigris::places(state,class = 'sf',year = 2018)
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat = qpd$lon = NA
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
}
table(is.na(qpd$lat))
head(qpd)
qpd[is.na(lon)]
qpd[!is.na(lon)]
qpd$lat = qpd$lon = NA
for(state in unique(states$STUSPS)){
print(state)
if(!any(state== qpd$STUPS)){next}
temp_places <- tigris::places(state,class = 'sf',year = 2018)
temp_places$STUSPS <- states$STUSPS[match(temp_places$STATEFP,states$STATEFP)]
temp_places$place_state = paste(temp_places$NAME,temp_places$STUSPS,sep = ', ')
replace = which(qpd$places %in% temp_places$place_state)
qpd$lat[replace] <- temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)]
qpd$lon[replace] <- temp_places$INTPTLON[match(qpd$places[replace],temp_places$place_state)]
}
table(is.na(qpd$lat))
qpd
qpd[1e6,]
qpd[1e6+2,]
qpd[1e6+10,]
i = 1e6+10
geocode_OSM(q = qpd$places[i])
code = geocode_OSM(q = qpd$places[i]
geocode_OSM('nonsense'))
code = geocode_OSM(q = qpd$places[i]
geocode_OSM('nonsense')
}
table(is.na(qpd$lat))
head(qpd)
qpd[!is.na(lon)]
length(temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)])
temp_centroids = st_centroid(temp_places)
temp_centroids
table(qpd$places %in% temp_places$place_state)
temp_places
qpd$places
s = 'MD'
for(u in uq){
for(s in qpd$STUPS[[u]]){
geocode_OSM(paste(qpd$pname[u],s,sep = ', '),)
}
}
table(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) %in% states$STUSPS)
qpd[order(-places,GEOID),]
qpd
placesstr_extract(places,'[A-Z]{2}$')
tdf[place.name=='Newport']
split_places = dplyr::ntile(x = seq_along(places),n = 1000)
place_split_list = split(places,split_places)
empty_list = list()
for(i in seq_along(place_split_list)[1:4]){
print(i)
i = 1
test = sapply(seq_along(place_split_list[[i]]),function(x) {print(x);geocode_OSM(place_split_list[[i]][x],
keep.unfound = T,as.sf = T,details = F,geometry = 'point')})
geocode_OSM('Stanford, CDP')
geocode_OSM('Auburn, WA',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
geocode_OSM('Stanford, California',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
ca_cdp = tigris::places('CA',class = 'sf')
test= unique(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) )
test[!test %in% state.abb]
cbsa[cbsa$GEOID=='39300',]
msa[msa$GEOID=='300',]
msa[grepl('Providence',msa$NAME),]
require(rvest)
cbsa_site = 'https://www.uspto.gov/web/offices/ac/ido/oeip/taf/cls_cbsa/cbsa_countyassoc.htm'
cbsa_site %>% read_html() %>% html_nodes('table') %>% html_table(trim = T)
ca_cdp[ca_cdp$NAME=='Stanford',]
tidygeocoder::geo(city = 'Stanford, California')
geocode_OSM(q = place_split_list[[i]][7],return.first.only = T,)
keep.unfound = T,as.sf = T,details = F,geometry = 'point')
geocode_OSM('nonsense')
geocode_OSM('nonsensegobbletygook')
for(i in 1:nrow(qpd)){
if(!is.na(qpd$lon)){next}
if(duplicated(qpd$places)[i]){next}
code = geocode_OSM(q = qpd$places[i]
if(!is.null(code)){qpd$lat[i]<-code$coords$y;qpd$lon[i]<-code$coords$x}
}
table(is.na(qpd$lat))
head(qpd)
qpd[!is.na(lon)]
length(temp_places$INTPTLAT[match(qpd$places[replace],temp_places$place_state)])
temp_centroids = st_centroid(temp_places)
temp_centroids
table(qpd$places %in% temp_places$place_state)
temp_places
qpd$places
s = 'MD'
for(u in uq){
for(s in qpd$STUPS[[u]]){
geocode_OSM(paste(qpd$pname[u],s,sep = ', '),)
}
}
table(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) %in% states$STUSPS)
qpd[order(-places,GEOID),]
qpd
placesstr_extract(places,'[A-Z]{2}$')
tdf[place.name=='Newport']
split_places = dplyr::ntile(x = seq_along(places),n = 1000)
place_split_list = split(places,split_places)
empty_list = list()
for(i in seq_along(place_split_list)[1:4]){
print(i)
i = 1
test = sapply(seq_along(place_split_list[[i]]),function(x) {print(x);geocode_OSM(place_split_list[[i]][x],
keep.unfound = T,as.sf = T,details = F,geometry = 'point')})
geocode_OSM('Stanford, CDP')
geocode_OSM('Auburn, WA',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
geocode_OSM('Stanford, California',as.sf = T,geometry = 'point',return.first.only = T,details = F,keep.unfound = T)
ca_cdp = tigris::places('CA',class = 'sf')
test= unique(unlist(str_extract_all(cbsa$NAME,'[A-Z]{2}')) )
test[!test %in% state.abb]
cbsa[cbsa$GEOID=='39300',]
msa[msa$GEOID=='300',]
msa[grepl('Providence',msa$NAME),]
require(rvest)
cbsa_site = 'https://www.uspto.gov/web/offices/ac/ido/oeip/taf/cls_cbsa/cbsa_countyassoc.htm'
cbsa_site %>% read_html() %>% html_nodes('table') %>% html_table(trim = T)
ca_cdp[ca_cdp$NAME=='Stanford',]
tidygeocoder::geo(city = 'Stanford, California')
geocode_OSM(q = place_split_list[[i]][7],return.first.only = T,)
keep.unfound = T,as.sf = T,details = F,geometry = 'point')
temp_codes = tryCatch({geocode_OSM(place_split_list[[i]],keep.unfound = T,as.sf = T,details = F,geometry = 'point')},error = function(e) NULL)
temp_codes
if(is.null(temp_codes)){
empty_list[[i]]<- temp_codes}
rm(temp_codes)
}
for(i in 1:nrow(qpd)){
if(!is.na(qpd$lon)){next}
if(duplicated(qpd$places)[i]){next}
code = geocode_OSM(q = qpd$places[i])
if(!is.null(code)){qpd$lat[i]<-code$coords$y;qpd$lon[i]<-code$coords$x}
}
install.packages('textclean')
qpd$places = textclean::replace_non_ascii(qpd$places)
for(i in 1:nrow(qpd)){
if(!is.na(qpd$lon)){next}
if(duplicated(qpd$places)[i]){next}
code = geocode_OSM(q = qpd$places[i])
if(!is.null(code)){qpd$lat[i]<-code$coords$y;qpd$lon[i]<-code$coords$x}
}
for(i in 1:nrow(qpd)){
if(!is.na(qpd$lon)){next}
if(duplicated(qpd$places)[i]){next}
print(i)
code = geocode_OSM(q = qpd$places[i])
if(!is.null(code)){qpd$lat[i]<-code$coords$y;qpd$lon[i]<-code$coords$x}
}
qpd[2,]
qpd[grepl("'",places),]
qpd = qpd[!grepl("'",places),]
for(i in 1:nrow(qpd)){
if(!is.na(qpd$lon)){next}
if(duplicated(qpd$places)[i]){next}
print(i)
code = geocode_OSM(q = qpd$places[i])
if(!is.null(code)){qpd$lat[i]<-code$coords$y;qpd$lon[i]<-code$coords$x}
}
qpd[2,]
qpd = qpd[!grepl("'|@|\\$|\\#",places),]
for(i in 1:nrow(qpd)){
if(!is.na(qpd$lon)){next}
if(duplicated(qpd$places)[i]){next}
print(i)
code = geocode_OSM(q = qpd$places[i])
if(!is.null(code)){qpd$lat[i]<-code$coords$y;qpd$lon[i]<-code$coords$x}
}
qpd[2,]
qpd = qpd[!grepl("'|@|\\$|\\#|\\%",places),]
qpd
qpd = qpd[!grepl("'|@|\\$|\\#|\\%|\\&",places),]
qpd
table(qpd$GEOID %in% cbsa$GEOID)
tdf
tdf[,sum(Flooding_Tweets_p.5),by=.(GEOID,year,month,day)]
tdf_ymd = tdf[,sum(Flooding_Tweets_p.5),by=.(GEOID,year,month,day)]
cbsa
tdf_ymd
test = left_join(cbsa,tdf_ymd)
test = merge(cbsa,tdf_ymd)
dim(test)
dim(cbsa)
test
cbsa_ymd = merge(cbsa,tdf_ymd)
# We'll start with a static plot
p <- ggplot(data = cbsa_ymd) + geom_sf()
p
# We'll start with a static plot
p <- ggplot(data = cbsa_ymd[cbsa_ymd$year==2015&cbsa_ymd$month==11,]) + geom_sf()
p
# We'll start with a static plot
p <- ggplot(data = cbsa_ymd[cbsa_ymd$year==2015&cbsa_ymd$month==11,]) + geom_sf(aes(fill = V1))
# We'll start with a static plot
p <- ggplot(data = cbsa_ymd[cbsa_ymd$year==2015&cbsa_ymd$month==11,]) +
geom_sf(data = cbsa) +
geom_sf(aes(fill = V1))
anim <- p +
transition_states(day,transition_length = 2,
state_length = 1)
anim
p
